import os

from vk_api import VkUpload

from bot.keyboards import Keyboards
import config
import vk_api

from bot.utils.doc_generator import generate_document


def process_fio_input(self, user_id, text):
    try:

        parts = text.strip().split()
        if len(parts) != 3:
            self.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",
                keyboard=Keyboards.create_standart_menu())
            return False

        user_data = self.database.find_user_by_fio(text.strip())

        if not user_data:
            self.send_message(
                user_id,
                "–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –§–ò–û —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                keyboard=Keyboards.create_standart_menu())
            return False

        self.state_manager.set_state(
            user_id,
            step="waiting_confirm",
            fio=user_data["–§–ò–û"].strip(),
            birth=user_data["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
            epb=user_data["–ù–æ–º–µ—Ä –≠–ü–ë"]
        )

        self.send_message(
            user_id,
            f"–ù–∞–π–¥–µ–Ω–æ:\n"
            f"–§–ò–û: {user_data['–§–ò–û']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']}\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
           keyboard= Keyboards.create_yes_no_keyboard()
        )
        return True
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ process_fio_input: {e}")
        self.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ")
        return None


def _handle_user_question(self, user_id, question_text):
    try:
        self.send_message(
            user_id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            keyboard = self.keyboards.create_main_menu()
        )

        admin_ids = config.Config.ADMINS

        if not admin_ids:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        user_info = self.vk.users.get(user_ids=user_id, fields='first_name,last_name')[0]
        user_name = f"{user_info['first_name']} {user_info['last_name']}"


        for admin_id in admin_ids:
            try:
                self.send_message(
                    admin_id,
                    f"üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_name} (https://vk.com/gim{config.Config.GROUP_ID}?sel={user_id}):\n\n{question_text}\n\n",
                    keyboard=None
                )
            except vk_api.exceptions.ApiError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É (id {admin_id}): {e}")

        self.state_manager.clear_state(user_id)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ _handle_user_question: {e}")
        self.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ")
        return None

FILLING_STEPS = [
    {"key": "fio", "prompt": "–®–∞–≥ ‚Ññ1\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û (—Ñ–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)"},
    {"key": "inst", "prompt": "–®–∞–≥ ‚Ññ2\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–°–ò, –ò–°–∏–ì–ù, –ò–ú–≠–∏–¢ –∏ —Ç.–¥.)"},
    {"key": "group", "prompt": "–®–∞–≥ ‚Ññ3\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É (–ø—Ä–∏–º–µ—Ä: 5–ë15 –¶–ò–ú-11, 8–°–ü–û09–ò–°–ü-42/21, 6–ë44 –ü–ü–û-31 –∏ —Ç.–¥.)"},
    {"key": "phone", "prompt": "–®–∞–≥ ‚Ññ4\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"},
    {"key": "email", "prompt": "–®–∞–≥ ‚Ññ5\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π email"},
]

def _handle_filling_spp(self, user_id, text):
    try:
        user_data = self.state_manager.get_user_data(user_id)
        progress = user_data.get('fill_progress', 0)

        if progress > 0 and progress <= len(FILLING_STEPS):
            key = FILLING_STEPS[progress - 1]['key']
            if key == "fio" and text:
                parts = text.strip().split()
                if len(parts) == 3:
                    surname, firstname, patronymic = parts
                    user_data["fio"] = text
                    user_data["signature"] = f"{surname} {firstname[0]}. {patronymic[0]}."
                else:
                    self.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
                    return
            elif text:
                user_data[key] = text

        if progress >= len(FILLING_STEPS):
            self.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –°–µ–∫—É–Ω–¥–æ—á–∫—É, –∑–∞—è–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")

            values = {
                "fio": user_data.get("fio", ""),
                "signature": user_data.get("signature", ""),
                "inst": user_data.get("inst", ""),
                "group": user_data.get("group", ""),
                "phone": user_data.get("phone", ""),
                "email": user_data.get("email", ""),
            }

            filepath = generate_document(values)

            try:
                upload = VkUpload(self.vk_session)
                doc_upload = upload.document_message(
                    doc=filepath,
                    title="–ó–∞—è–≤–ª–µ–Ω–∏–µ_–°–ü–ü.docx",
                    peer_id=user_id
                )
                print(doc_upload)

                doc_info = doc_upload['doc']
                doc_str = f"doc{doc_info['owner_id']}_{doc_info['id']}"
                if doc_info.get('access_key'):
                    doc_str += f"_{doc_info['access_key']}"

                self.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ! –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ:", attachment=doc_str)
                self.send_message(
                    user_id,
                    "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å? üòä",
                    keyboard=Keyboards.create_main_menu()
                )

            except Exception as e:
                self.send_message(user_id, f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ! –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                print(f"[DEBUG]: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {e}")

            finally:
                try:
                    os.remove(filepath)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filepath}: {e}")

            self.state_manager.clear_state(user_id)
            return

        step_info = FILLING_STEPS[progress]
        self.send_message(
            user_id,
            step_info['prompt'],
            keyboard=Keyboards.create_standart_menu())

        user_data["fill_progress"] = progress + 1

        self.state_manager.set_state(
            user_id,
            step="filling_spp",
            **user_data
        )

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ _handle_filling_spp: {e}")
        self.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ")
